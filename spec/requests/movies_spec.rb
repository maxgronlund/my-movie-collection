# frozen_string_literal: true

require 'rails_helper'
require 'webmock/rspec'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/movies', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Movie. As you add validations to Movie, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  let(:movie) { create(:movie, user:) }
  let(:movies) { FactoryBot.create_list(:movie, 5, user:) }
  let(:valid_attributes) { { review: 'fo' } }

  let(:invalid_attributes) do
    { Title: 'NOT A MOVIE XYZ' }
  end

  before(:each) do
    sign_in user
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      get user_movies_url(user)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      get user_movie_url(user, movie)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_user_movie_url(user)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      get edit_user_movie_url(user, movie)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    let(:title) { 'Twister' }
    let(:api_key) { ENV.fetch('OMDB_API_KEY', nil) }
    let(:plot) { 'full' }
    let(:omdb_response_path) { Rails.root.join('spec', 'support', 'fixtures', 'omdb_response.json') }
    let(:mock_response) { File.read(omdb_response_path) }

    before do
      stub_request(:get, "http://www.omdbapi.com/?apikey=#{api_key}&plot=short&t=")
        .with(
          headers: {
            'Accept' => '*/*',
            'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
            'User-Agent' => 'Ruby'
          }
        )
        .to_return(status: 200, body: mock_response, headers: {})

      allow(ENV).to receive(:[]).and_call_original # Allow all ENV calls to proceed normally
      allow(ENV).to receive(:[]).with('OMDB_API_KEY').and_return(api_key)
    end

    before(:each) do
      sign_in user
    end

    context 'with valid parameters' do
      it 'creates a new Movie' do
        expect do
          post user_movies_url(user_id: user.id), params: { movie: valid_attributes }
        end.to change(Movie, :count).by(1)
      end

      it 'redirects to the created movie' do
        post user_movies_url(user_id: user.id), params: { movie: valid_attributes }
        expect(response).to redirect_to(user_movie_url(user, Movie.last))
      end
    end
  end

  describe 'POST /create with invalid attributes' do
    let(:api_key) { ENV.fetch('OMDB_API_KEY', nil) }
    # let(:omdb_response_path) { Rails.root.join('spec', 'support', 'fixtures', 'omdb_response.json') }
    let(:mock_response) { { 'Response' => 'False' }.to_json }

    before do
      stub_request(:get, 'http://www.omdbapi.com/?apikey=d661ea05&plot=short&t=NOT%20A%20MOVIE%20XYZ')
        .with(
          headers: {
            'Accept' => '*/*',
            'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
            'User-Agent' => 'Ruby'
          }
        )
        .to_return(status: 200, body: { 'Response' => 'False' }.to_json, headers: {})

      allow(ENV).to receive(:[]).and_call_original # Allow all ENV calls to proceed normally
      allow(ENV).to receive(:[]).with('OMDB_API_KEY').and_return(api_key)
    end

    context 'with invalid parameters' do
      it 'does not create a new Movie' do
        expect do
          post user_movies_url(user), params: { movie: invalid_attributes }
        end.to change(Movie, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post movies_url, params: { movie: invalid_attributes }
        expect(response).to have_http_status(:found)
      end
    end
  end

  describe 'POST /create' do
    # let(:api_key) { ENV.fetch('OMDB_API_KEY', nil) }
    # let(:plot) { 'full' }

    before do
      stub_request(:get, 'http://www.omdbapi.com/?apikey=d661ea05&plot=short&t=NOT%20A%20MOVIE%20XYZ')
        .with(
          headers: {
            'Accept' => '*/*',
            'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
            'User-Agent' => 'Ruby'
          }
        )
        .to_return(status: 200, body: { fo: 'bar' }.to_json, headers: {})

      # allow(ENV).to receive(:[]).and_call_original # Allow all ENV calls to proceed normally
      # allow(ENV).to receive(:[]).with('OMDB_API_KEY').and_return(api_key)
    end

    context 'with invalid API response' do
      it 'does not create a new Movie' do
        expect do
          post user_movies_url(user), params: { movie: invalid_attributes }
        end.to change(Movie, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post movies_url, params: { movie: invalid_attributes }
        expect(response).to have_http_status(:found)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:user) { create(:user) }
      let(:movie) { create(:movie, user:) }
      let(:paragraph) { Faker::Lorem.paragraph }
      let(:new_attributes) do
        { review: paragraph }
      end

      before(:each) do
        sign_in user
      end

      it 'updates the requested movie' do
        patch user_movie_url(user, movie), params: { movie: new_attributes }
        movie.reload
        expect(movie.review).to eq(paragraph)
      end

      it 'redirects to the movie' do
        patch user_movie_url(user, movie), params: { movie: new_attributes }
        movie.reload
        expect(response).to redirect_to(user_movie_url(user, movie))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch user_movie_url(user, movie), params: { movie: { Title: nil, Year: '2000' } }
        movie.reload
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested movie' do
      movie_to_delete = create(:movie, user:)
      expect do
        delete user_movie_url(user, movie_to_delete)
      end.to change(Movie, :count).by(-1)
    end

    it 'redirects to the movies list' do
      movie_to_delete = create(:movie, user:)
      delete user_movie_url(user, movie_to_delete)
      expect(response).to redirect_to(user_movies_url(user))
    end
  end
end
